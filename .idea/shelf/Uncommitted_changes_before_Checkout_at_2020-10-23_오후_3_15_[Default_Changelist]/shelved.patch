Index: app/src/main/java/kr/co/softcampus/tooksampoom/RunningActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.co.softcampus.tooksampoom;\r\n\r\nimport android.Manifest;\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.location.LocationManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.Chronometer;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\n\r\nimport com.google.android.gms.maps.CameraUpdate;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.LatLngBounds;\r\nimport com.google.android.gms.maps.model.Polyline;\r\nimport com.google.android.gms.maps.model.PolylineOptions;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class RunningActivity extends AppCompatActivity {\r\n\r\n    LocationManager locationManager;\r\n    GoogleMap map;\r\n    Button startBtn;\r\n    Button successBtn;\r\n    TextView distance_text;\r\n    TextView speed_text;\r\n    TextView speed;\r\n    TextView time;\r\n    TextView speed_result;\r\n    TextView time_result;\r\n    Chronometer chronometer;\r\n    float pastDistance=0;\r\n    long pastTime;\r\n    int elapsedSec = 0;\r\n    int idx=0;\r\n    int isButtonClicked = -1;\r\n    float distance = 0;\r\n    long elapsedMillis;\r\n    ArrayList<Location> location_storage = new ArrayList<Location>();\r\n    ArrayList<LatLng> positions = new ArrayList<LatLng>();\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.activity_running);\r\n        startBtn = (Button) findViewById(R.id.startbtn);\r\n        successBtn = (Button) findViewById(R.id.successbtn);\r\n        distance_text = (TextView) findViewById(R.id.distance_text);\r\n        speed_text = (TextView) findViewById(R.id.speed_text);\r\n        speed = (TextView) findViewById(R.id.speed);\r\n        time = (TextView) findViewById(R.id.time);\r\n        speed_result = (TextView) findViewById(R.id.speed_result);\r\n        time_result = (TextView) findViewById(R.id.time_result);\r\n        chronometer = (Chronometer) findViewById(R.id.chronometer);\r\n\r\n        UserInfo userinfo = new UserInfo();\r\n        userinfo.setName(\"minsook\");\r\n        userinfo.setAge(22);\r\n        userinfo.setHeight(186);\r\n        userinfo.setSex(\"female\");\r\n        userinfo.setWeight(72);\r\n        Log.d(\"db\",Integer.toString(DBhelper.setUser(this,userinfo)));\r\n\r\n        UserInfo user1 = DBhelper.getUser(this,1);\r\n        Log.d(\"db\", user1.name+\" \"+user1.height+\" \"+user1.weight+\" \"+user1.age+\" \"+user1.sex);\r\n\r\n\r\n\r\n        init();\r\n    }\r\n\r\n    //시작 버튼 누르면 chronometer, textview, button나타나고 chronometer 시작됨\r\n    public void onClickStartbtn(View view) {\r\n        chronometer.setBase(SystemClock.elapsedRealtime());\r\n        chronometer.start();\r\n        startBtn.setVisibility(View.GONE);\r\n        chronometer.setVisibility(View.VISIBLE);\r\n        speed_text.setVisibility(View.VISIBLE);\r\n        distance_text.setVisibility(View.VISIBLE);\r\n        isButtonClicked = 1;\r\n    }\r\n\r\n    //측정 끝난 뒤 완료버튼 누르면 이전 activity에 데이터 전달하고 현재 activity 종료\r\n    public void onClickSuccessbtn(View view) {\r\n        Intent intent =new Intent();\r\n        intent.putExtra(\"time\", elapsedSec);\r\n        setResult(RESULT_OK, intent);\r\n        finish();\r\n    }\r\n\r\n    public void init() {\r\n        FragmentManager fragmentManager = getSupportFragmentManager();\r\n        SupportMapFragment mapFragment=(SupportMapFragment)fragmentManager.findFragmentById(R.id.map);\r\n        //Map callback 등록\r\n        MapReadyCallback mapCallback = new MapReadyCallback();\r\n        mapFragment.getMapAsync(mapCallback);\r\n    }\r\n\r\n\r\n    class MapReadyCallback implements OnMapReadyCallback {\r\n        //GoogleMap이 준비되면 실행되는 method\r\n        @Override\r\n        public void onMapReady(GoogleMap googleMap) {\r\n            map = googleMap;\r\n            getMyLocation();\r\n        }\r\n    }\r\n\r\n    //GoogleMap이 준비되면 실행되는 함수\r\n    public void getMyLocation() {\r\n        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);\r\n        if (Build.VERSION.SDK_INT>=Build.VERSION_CODES.M){\r\n            if(checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)==PackageManager.PERMISSION_DENIED){\r\n                return;\r\n            }\r\n        }\r\n\r\n        //GPS 사용가능하면 1초마다 위치 갱신하고 불가능하면 Dialog 띄워서 확인 누르면 finish() 실행\r\n        GetMyLocationListener locationListener = new GetMyLocationListener();\r\n        if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)){\r\n            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,\r\n                                                500,\r\n                                                0,\r\n                                                locationListener);\r\n        } else {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n            builder.setTitle(\"실행 오류\");\r\n            builder.setMessage(\"GPS를 허용해주세요\");\r\n            DialogListener dialogListener = new DialogListener();\r\n            builder.setPositiveButton(\"확인\", dialogListener);\r\n            builder.show();\r\n        }\r\n    }\r\n\r\n    class DialogListener implements DialogInterface.OnClickListener {\r\n        @Override\r\n        public void onClick(DialogInterface dialogInterface, int i) {\r\n            finish();\r\n        }\r\n    }\r\n\r\n    class GetMyLocationListener implements LocationListener {\r\n        //위치 갱신될 때 마다 call되는 method\r\n        @Override\r\n        public void onLocationChanged(@NonNull Location location) {\r\n            setMyLocation(location,this);\r\n        }\r\n\r\n        @Override\r\n        public void onStatusChanged(String provider, int status, Bundle extras) {\r\n        }\r\n    }\r\n\r\n    public void setMyLocation(Location location,LocationListener listener) {\r\n        //현재 위치로 줌인\r\n        LatLng position = new LatLng(location.getLatitude(), location.getLongitude());\r\n        CameraUpdate update = CameraUpdateFactory.newLatLngZoom(position, 16f);\r\n        //현재위치 따라 카메라 이동\r\n        map.moveCamera(update);\r\n        //현재위치 표시\r\n        if (Build.VERSION.SDK_INT>=Build.VERSION_CODES.M){\r\n            if(checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)==PackageManager.PERMISSION_DENIED){\r\n                return;\r\n            }\r\n        }\r\n        map.setMyLocationEnabled(true);\r\n\r\n        //시작 버튼이 클릭됐을 때 실행되는 코드\r\n        if(isButtonClicked == 1){\r\n            //동선 그릴때 필요한 location을 List에 저장하고 이전에 측정된 위치와 현재 위치 사이의 거리 계산 후 total distance에 저장\r\n            location_storage.add(location);\r\n            if(idx!=0){\r\n                float[] distance_piece = new float[1];\r\n                Location.distanceBetween(location_storage.get(idx-1).getLatitude()\r\n                                        ,location_storage.get(idx-1).getLongitude()\r\n                                        ,location_storage.get(idx).getLatitude()\r\n                                        ,location_storage.get(idx).getLongitude()\r\n                                        ,distance_piece);\r\n                distance+=distance_piece[0];\r\n                distance_text.setText(Double.toString(Math.round((distance/1000)*100)/100.0)+\" km\");\r\n                elapsedMillis = SystemClock.elapsedRealtime() - chronometer.getBase();\r\n                long nowTime = SystemClock.elapsedRealtime();\r\n\r\n                if(idx==1){\r\n                    pastTime=SystemClock.elapsedRealtime();\r\n                }\r\n                if(idx%20 == 0){\r\n                    float tookDistance = distance - pastDistance;\r\n                    pastDistance = distance;\r\n                    long tookTime = nowTime - pastTime;\r\n                    pastTime = SystemClock.elapsedRealtime();\r\n                    speed_text.setText(Double.toString(Math.round((tookTime/(tookDistance*60))*100)/100.0)+\" 분/km\");\r\n                }\r\n                //3000m 이상 달렸을 때 위치 갱신 멈추고, 맵 크게 바꾸고 걸린시간, 평균 속도 화면에 띄워주는 코드\r\n                if(distance >= 3000.0){\r\n                    locationManager.removeUpdates(listener);\r\n                    chronometer.stop();\r\n                    LatLngBounds area;\r\n                    area = new LatLngBounds(positions.get(0), positions.get(1));\r\n                    for(int i=0; i<positions.size(); i+=100){\r\n                        area.including(positions.get(i));\r\n                        Log.d(\"qwerq\", Integer.toString(i));\r\n                    }\r\n                    update = CameraUpdateFactory.newLatLngBounds(area,  10);\r\n                    map.moveCamera(update);\r\n                    elapsedSec = (int)elapsedMillis/1000;\r\n                    //database로 시간(초) 보내기\r\n                    DBhelper.setRunningRecord(this, 1, elapsedSec);\r\n\r\n                    time_result.setText(Integer.toString(elapsedSec/60)+\"분 \"+Integer.toString(elapsedSec%60)+\"초\");\r\n                    chronometer.setVisibility(View.GONE);\r\n                    speed_text.setVisibility(View.GONE);\r\n                    distance_text.setVisibility(View.GONE);\r\n                    successBtn.setVisibility(View.VISIBLE);\r\n                    time.setVisibility(View.VISIBLE);\r\n                    speed.setVisibility(View.VISIBLE);\r\n                    time_result.setVisibility(View.VISIBLE);\r\n                    speed_result.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n\r\n            positions.add(new LatLng(location.getLatitude(),location.getLongitude()));\r\n            Polyline polyline = map.addPolyline((new PolylineOptions())\r\n                    .clickable(false)\r\n                    .addAll(positions));\r\n            idx++;\r\n            Log.d(\"test222\", Integer.toString(idx));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/kr/co/softcampus/tooksampoom/RunningActivity.java	(revision 758764c348cba1e3167708a57a46e5425169f61f)
+++ app/src/main/java/kr/co/softcampus/tooksampoom/RunningActivity.java	(date 1603433670832)
@@ -214,8 +214,8 @@
                     chronometer.stop();
                     LatLngBounds area;
                     area = new LatLngBounds(positions.get(0), positions.get(1));
-                    for(int i=0; i<positions.size(); i+=100){
-                        area.including(positions.get(i));
+                    for(int i=0; i<positions.size(); i+=50){
+                        area = area.including(positions.get(i));
                         Log.d("qwerq", Integer.toString(i));
                     }
                     update = CameraUpdateFactory.newLatLngBounds(area,  10);
